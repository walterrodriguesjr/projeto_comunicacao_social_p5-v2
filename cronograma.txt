INSTALAÇÃO
1 - instalação do laravel via composer, atualização do composer 
    ->composer create-project --prefer-dist laravel/laravel:^7.0 nome do projeto
    ->composer update

ROUTES
2-criação da rota (routes) no arquivo web.php 
    ->Route::get('/', 'PrincipalController@principal')->name('sistema.index');

CONTROLLERS
3-criação do controller - PrincipalController em (app\)Http\Controllers)
        ->php artisan make:controller PrincipalController
    ->inserida a função 'principal', que como return, renderiza a view 'sistema.principal', já utilizando o seu apelido delarado em web.php

VIEWS
4-criada a view 'principal', que será a index do projeto
    ->principal.blade.php 

DEPENDÊNCIAS E BIBLIOTECAS
5-instalação das dependencias do npm, jquery e boostrap direto  no laravel 
->instalado npm - npm install
->npm run dev
->instalado jquery - npm install jquery (para inserir no projeto = )<script>src="{{asset('site/jquery.js')}}"</script> , posterior pode ser exportado junto como template
->instalado bootstrap 5 - npm install bootstrap - <script>src="{{asset('site/jquery.js')}}"</script>
->instalado css bootstrap 5 - inserido no webpack.mic.js o .sass('node_modules/bootstrap/scss/bootstrap.scss', 'public/site/bootstrap.css')
->sempre inserir os referidos endereços no webpack.mic.js (sass do bootstrap ja inserido anteriormente)
->criar na pasta views, uma pasta 'scss', em seguida nela, criar um arquivo 'style.scss';
    ->nesta pasta é inserida o @import "~bootstrap/scss/bootstrap"; e no webpack.mix.js , no .sass fica: .sass('resources/views/scss/style.scss', 'public/site/style.css')
    ->em seguida, no views, na parte de link de css, fica: <link rel="stylesheet" href="{{asset('site/style.css')}}">
->sempre rodar o npm run dev - após inserir uma nova dependencia
->necessario inserir o link css no inicio e os scripts ao final da view, porem posteriormente, pode ser exportado junto
->neste caso, também fica a possibilidade de customizar as classes de bootstrap
tutorial:-> https://www.youtube.com/watch?v=LQQk1ZSyqLM

LAYOUTS, COMPONENTS E TEMPLATE
6-inserido a pasta layouts, dentro de views, para controlar as pastas: 
    ->components: possui partes comuns do sistema como footer, navbar etc.. entram por include no template1
    ->template: já importa as partes comuns do components, bastando apenas ser inseridos as partes principais das view por @yield 

MODELS 
7-models são responsáveis por persistirem dados no banco 
    ->criando uma MODEL para 'create' e em seguida,com o '-m' já estabelecendo sua migration
        ->php artisan make:model CreateModel -m

MIGRATION
8->as migration servem para criar as tabelas em banco diretamente, atraves de codigo PHP
        ->o nome repassado na criação da model, reflete no nome da criação da class do mesmo
        ->Migrations São classes que executam funções, as quais executam comando 
            para banCo de dados (Schema), criando, editando, deletando etc...
        ->para rodar uma migrate - php artisan migrate

.ENV 
9-por padrão, o laravel cria o arquivo .env.example, porem, deve se
    fazer uma copia deste, nomear como .env, e neste arquivo, configurar com o banco escolhido 

PHP.INI 
10-MUITAS EXTENSÕES POR PADRÃO VEM BLOQUEADAS, SENDO DE MYSQL, PSTGL, PDO ETC.. 
    SENDO NECESSARIO ACESAR O php.ini e descomentar (;) AS EXTENSÕES DESEJADAS 






